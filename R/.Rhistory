p_man   = rep(NA, 14)
# trade ge
p_man[c(4, 6:8, 10:13)] = 2
p_man[6:7] = 3
Subset  = NULL
K = 4
source('model_est_sub.R')
# print(Countries)
# print(lapply(models, '[[', 3) %>% unlist)
# id0 ---------------------------------------------------------------------
cores = parallel::detectCores()
maxit = 10000
set.seed(12345)
source('model_id0_K4.R')
Q = P_Q_dc$all
# dcov
dcov
# boot --------------------------------------------------------------------
nboot = 499
idx   = 1:length(models)
resids_boot = readRDS('out/resids_boot_K4.rds')
P_Q_dc_boot = readRDS('out/P_Q_dc_boot_K4.rds')
diag_max = function(y, positive = TRUE){
.sum_diag = function(x, Q){
sum(abs(diag(Q[,x])))
}
.postiv_sign = function(x){
for (kk in 1:ncol(x)) {
if (x[kk,kk]<0) {
x[,kk] = x[,kk] * -1
}
}
x
}
K = ncol(y)
column_id = combinat::permn(K)
optim_id = which.max(lapply(column_id, .sum_diag, Q = y))
.postiv_sign(y[,column_id[[optim_id]]])
}
.get_AB = function(x, Q, Reorder = FALSE){
Q = diag_max(Q)
B_foo =  x$chol %*% Q
if(Reorder){
sign_mat = matrix(c(1, -1, 1, 1), nrow = 2, ncol = 2)
if(all(sign(B_foo[1:2,1:2])== sign_mat)){
B_foo[,c(1,2)] = B_foo[,c(2,1)]
B_foo[, 2] = B_foo[, 2]*-1
}
}
list('Bmat' = .postiv_sign(B_foo),
'Amat' = x$A_hat )
}
Bmats_pool = list()
for (b in 1:nboot) {
Bmats_pool[[b]] = resids_boot[[b]] %>% lapply(.get_AB, Q = P_Q_dc_boot[[b]]$all)
}
rm('resids_boot')
# get boot mean -----------------------------------------------------------
# source('makeB_boots.R')
Bmats_MG = Bmat_MG(Bmats_pool, K = K)
source('do_irf_MG_K4.R')
out = plot_irf_MG_boot_K4(0, modes = 'med', bands = 'areas')
out
source('do_irf_MG_K4.R')
out = plot_irf_MG_boot_K4(0, modes = 'med', bands = 'areas')
out
out
rm(list = ls())
Rcpp::sourceCpp('funs/IRF.cpp')
source('funs/IRF_cum.R')
# reduced form ------------------------------------------------------------
vartype = 'all'
p_man   = rep(NA, 14)
# benchmark
# p_man[c(2, 3, 7, 8, 10:13)] = 2
# diff
p_man[c(3, 4:10, 12:13)] = 2
p_man[12] = 3
Subset  = NULL
K = 4
source('model_est_sub.R')
print(Countries)
models %>% lapply('[[', 3) %>% unlist
# panel rotation  ---------------------------------------------------------
cores = parallel::detectCores()
maxit = 25000
set.seed(12345)
source('model_id0_K4.R')
.get_B = function(x){
Q = P_Q_dc$all
Q = diag_max(Q)
B_foo =  x$chol %*% Q
.postiv_sign(B_foo) #%>% solve()
}
Bmats = resids %>% lapply(.get_B)
# impuse responses --------------------------------------------------------
horizon = 21
irf_all = list()
for (i in 1:length(Bmats)) {
foo = IRF_fast(A_hat = resids[[i]]$A_hat, B_hat = Bmats[[i]], horizon = 21)
dat = foo %>% sapply(function(x) x) %>% t
irf_all[[i]] = dat #%>% .cum_irf_1_K4
}
Target = 9
.get_cumip = function(x, r, t){
sum(x[r,t])
}
cumip = irf_all %>% lapply(.get_cumip, r = 1:9, t = Target) %>% unlist
make_scatter_0 = function(Control = c("g_debt",
"g_exp",
"trade",
"p_debt",
"pd2inc",
"inv_hh",
"inv_nf",
"top20",
"bot40",
"NIE",
"equity"), Target){
Range = list(0:9, 10:21)
.get_cumip = function(x, r, t){
sum(x[r,t])
}
require(xts)
load('data/panals/panel_euro_14_controll.RData')
if (Control == 'g_debt'){
c_pre    = debt_ratio %>%  colMeans(na.rm = T)
xlab     = 'Government debt to GDP ratio (%)'
} else if  (Control == 'g_exp'){
c_pre      = ge %>% colMeans(na.rm = T)
xlab = 'Government expenditure to GDP ratio (%)'
} else if  (Control == 'trade'){
c_pre   = ratio_trade %>% colMeans(na.rm = T)
xlab = 'Import plus export to GDP ratio (%)'
} else if  (Control == 'p_debt'){
c_pre    = pdebt %>% colMeans(na.rm = T)
xlab = 'Debt of private sector to GDP ratio (%)'
} else if  (Control == 'inv_hh'){
c_pre    = inv_hh %>% colMeans(na.rm = T)
xlab = 'Gross investment rate of households (%)'
} else if  (Control == 'inv_nf'){
c_pre    = inv_nf %>% colMeans(na.rm = T)
xlab = 'Gross investment rate of non-financial corporations (%)'
} else if  (Control == 'pd2inc'){
c_pre    = pd2inc %>% colMeans(na.rm = T)
xlab = 'Debt-to-income ratio of households  (%)'
} else if  (Control == 'top20'){
c_pre    = top20 %>% colMeans(na.rm = T)
xlab = 'Income share of the top 20 % of the population (%)'
} else if  (Control == 'bot40'){
c_pre    = bot40 %>% colMeans(na.rm = T)
xlab = 'Income share of the bottom 40 % of the population (%)'
} else if  (Control == 'NIE'){
c_pre    = NIE %>% colMeans(na.rm = T)
xlab = 'Net interest rate exposure of households as % of GDP'
} else if  (Control == 'equity'){
c_pre    = equity %>% colMeans(na.rm = T)
xlab = 'Equity and investment fund shares of households as % of GDP'
}
c_var       = data.frame(1:14, c_pre)
colnames(c_var)   = c('countries', 'controll')
c_var       = c_var %>% reshape2::melt(id.vars = c("countries"), value.name = 'controll')
c_var = c_var[,-2]
cumip  = matrix(NA, nrow = 14, ncol = length(Range))
for (i in 1:length(Range)) {
cumip[,i]   = irf_all  %>% lapply(.get_cumip, r = Range[[i]], t = Target) %>% unlist
}
colnames(cumip)  = c('Horizon: 0 - 9 ', 'Horizon: 10 - 21')
df1 = cumip %>% reshape2::melt()
colnames(df1)  = c('countries', 'h', 'value')
df = df1 %>% dplyr::left_join(c_var, by = c('countries'))
require(ggpubr)
df %>% ggscatter(x = "controll", y = "value") + #, add = "reg.line", conf.int = TRUE) +
stat_cor(method = 'pearson', color = "black", p.accuracy = 0.001, r.accuracy = 0.01, label.y.npc = "bottom", cor.coef.name = "rho") +
facet_grid(~h) +
geom_smooth(method=lm, formula = y ~ x, alpha = 0.2) +
xlab(xlab) + ylab("Cumulated responses") + theme_bw() + theme(legend.position = 'bottom', legend.title = element_blank())
}
# output response to MP ---------------------------------------------------
## debt
make_scatter_0(Control = 'g_debt', Target = 9) #******
## - net interest rate exposure
make_scatter_0(Control = "NIE", Target = 9)
## Financial balance sheets
## - equity and investment fund shares
make_scatter_0(Control = "equity", Target = 9)
## inequality
make_scatter_0(Control = "top20", Target = 9)
make_scatter_0(Control = "bot40", Target = 9)
make_scatter_0(Control = 'p_debt', Target = 9)
make_scatter_0(Control = 'pd2inc', Target = 9)
## investment
make_scatter_0(Control = "inv_hh", Target = 9)
## goverment exp
make_scatter_0(Control = "g_exp", Target = 9)
## investment
make_scatter_0(Control = "inv_hh", Target = 9)
make_scatter_0(Control = "inv_nf", Target = 9)
# output response to MP ---------------------------------------------------
## debt
make_scatter_0(Control = 'g_debt', Target = 9) #******
## inequality
make_scatter_0(Control = "top20", Target = 9)
make_scatter_0(Control = "bot40", Target = 9)
## Financial balance sheets
## - equity and investment fund shares
make_scatter_0(Control = "equity", Target = 9)
## Financial balance sheets
## - equity and investment fund shares
make_scatter_0(Control = "equity", Target = 9)
## - net interest rate exposure
make_scatter_0(Control = "NIE", Target = 9)
## inequality
make_scatter_0(Control = "top20", Target = 9)
setwd("~/ownCloud/mp_tvp/R")
rm(list = ls())
source('./rfun/simu_DGP.R')
# Get parameters of VAR(2) ------------------------------------------------
# Autoregressive parameter: B1, B2 in our paper
Par$A_1
Par
rm(list = ls())
library(magrittr)
source('./rfun/simu_DGP.R')
# Get parameters of VAR(2) ------------------------------------------------
# Autoregressive parameter: B1, B2 in our paper
Par$A_1
Par$A_2
# structural impact multiplier: A0^-1 in our paper
Par$B
# Make data ---------------------------------------------------------------
Tob = 480 # sample size
set.seed(1234)
dat = .DGP0(Par, Tob, phi = 1, eta_sd = 0.5, burn = 1000)
y = dat$Y
require(vars)
var_est = VAR(y, p = 2, type = 'none')
u = var_est %>% resid
z = dat$iv[-c(1:2)]
z
dat$shock %>% cov]
dat$shock %>% cov
# priors and training sample ----------------------------------------------
train_ob = 60
var_est %>% Bcoef()
# Get parameters of VAR(2) ------------------------------------------------
# Autoregressive parameter: B1, B2 in our paper
Par$A_1
Par$A_2
u
# priors and training sample ----------------------------------------------
train_ob = 60
var_est = VAR(y, p = 2, type = 'none')
u = var_est %>% resid
z = dat$iv[-c(1:2)]
# priors and training sample ----------------------------------------------
train_ob = 60
train_u  = u[1:train_ob,]
train_z  = z[1:train_ob]
train_phi2= (crossprod(train_z, train_u)/train_ob) %*% solve(crossprod(train_u)/train_ob) %*% (crossprod(train_u, train_z)/train_ob)
train_phi2
M_phi = sqrt(train_phi2)
V_phi = 0.5
train_phi2= (crossprod(train_z, train_u)/train_ob) %*% solve(crossprod(train_u)/train_ob) %*% (crossprod(train_u, train_z)/train_ob)
train_phi2
M_phi = sqrt(train_phi2)
M_phi
V_phi = 0.5
tau_eta = 4
theta_eta = 1
train_omic = theta_eta/tau_eta
train_omic
train_omic = train_phi2/(theta_eta/tau_eta)
train_omic
V_a1 = solve(crossprod(train_u) * train_omic)
M_a1 = V_a1 %*% (crossprod(train_u, train_z)* train_omic)
train_omic = train_phi2/(theta_eta/tau_eta)
V_a1 = solve(crossprod(train_u) * train_omic)
M_a1 = V_a1 %*% (crossprod(train_u, train_z)* train_omic)
# priors and training sample ----------------------------------------------
train_ob = 60
train_u  = u[1:train_ob,]
train_z  = z[1:train_ob]
train_phi2= (crossprod(train_z, train_u)/train_ob) %*% solve(crossprod(train_u)/train_ob) %*% (crossprod(train_u, train_z)/train_ob)
M_phi = sqrt(train_phi2)
V_phi = 0.5
tau_eta = 4
theta_eta = 1
train_omic = train_phi2/(theta_eta/tau_eta)
V_a1 = solve(crossprod(train_u) * train_omic)
M_a1 = V_a1 %*% (crossprod(train_u, train_z)* train_omic)
# MCMC --------------------------------------------------------------------
burn = 10000
train_omic = theta_eta/tau_eta
V_a1 = solve(crossprod(train_u) * train_omic)
M_a1 = V_a1 %*% (crossprod(train_u, train_z)* train_omic)
# MCMC --------------------------------------------------------------------
burn = 10000
V_a1 = solve(crossprod(train_u) * train_omic)
M_a1 = V_a1 %*% (crossprod(train_u, train_z)* train_omic)
# MCMC --------------------------------------------------------------------
burn = 10000
rm(list = ls())
library(magrittr)
source('./rfun/simu_DGP.R')
# Get parameters of VAR(2) ------------------------------------------------
# Autoregressive parameter: B1, B2 in our paper
Par$A_1
Par$A_2
# structural impact multiplier: A0^-1 in our paper
Par$B
# A0 in our paper
solve(Par$B)
# Make data ---------------------------------------------------------------
Tob = 480 # sample size
set.seed(1234)
dat = .DGP0(Par, Tob, phi = 1, eta_sd = 0.5, burn = 1000)
y = dat$Y
require(vars)
var_est = VAR(y, p = 2, type = 'none')
u = var_est %>% resid
z = dat$iv[-c(1:2)]
# priors and training sample ----------------------------------------------
train_ob = 60
train_u  = u[1:train_ob,]
train_z  = z[1:train_ob]
train_phi2= (crossprod(train_z, train_u)/train_ob) %*% solve(crossprod(train_u)/train_ob) %*% (crossprod(train_u, train_z)/train_ob)
M_phi = sqrt(train_phi2)
V_phi = 0.5
tau_eta = 4
theta_eta = 1
train_omic = theta_eta/tau_eta
V_a1 = solve(crossprod(train_u) * train_omic)
M_a1 = V_a1 %*% (crossprod(train_u, train_z)* train_omic)
# eta = train_z - 1 * train_u %*% M_a1
# var(eta)
# MCMC --------------------------------------------------------------------
burn = 10000
nMC  = burn + 2000
Teff = Tob - train_ob - 2
zeff = z[-(1:train_ob)]
ueff = u[-(1:train_ob),]
phi_star = sqrt(train_phi2)
a1_star = M_a1
# memory reservation --
MC_omic     = matrix(NA, nrow = nMC - burn, ncol = 1)
MC_phi      = matrix(NA, nrow = nMC - burn, ncol = 1)
MC_eta_sig2 = matrix(NA, nrow = nMC - burn, ncol = 1)
MC_a1       = matrix(NA, nrow = nMC - burn, ncol = 3)
MC_eps      = matrix(NA, nrow = nMC - burn, ncol = Teff)
for (i in 1:nMC) {
eps_star = ueff %*% a1_star
eta = zeff - as.numeric(phi_star) * eps_star
# draw eta_sig
tau_eta_star    = tau_eta + Teff;
theta_eta_star  = theta_eta + crossprod(eta);
foo0            = matrix(rnorm(tau_eta_star), nrow = tau_eta_star, ncol = 1)
sigma_eta2_star = theta_eta_star / as.numeric(crossprod(foo0))
# draw phi
V_phi_star = 1/(crossprod(eps_star)/sigma_eta2_star + 1/V_phi)
M_phi_star = V_phi_star * ( t(eps_star) %*% zeff /sigma_eta2_star + M_phi/V_phi)
phi_star   = rnorm(1, mean = as.numeric(M_phi_star), sd = sqrt(as.numeric(V_phi_star)))
omic_star = phi_star^2/sigma_eta2_star
# draw a1
V_a1_star = solve(crossprod(ueff) * as.numeric(omic_star) + solve(V_a1))
M_a1_star = V_a1_star %*% (crossprod(ueff, zeff)* as.numeric(omic_star) + solve(V_a1) %*% M_a1 )
a1_star   = M_a1_star + t(chol(V_a1_star)) %*% matrix(rnorm(3), nrow = 3, ncol = 1)
# store
if (i > burn){
MC_omic[i-burn,]      = omic_star
MC_phi[i-burn,]       = phi_star
MC_eta_sig2[i-burn,]  = sigma_eta2_star
MC_a1[i-burn,]        = a1_star
MC_eps[i-burn,]       = eps_star
}
}
# par(mfrow = c(3,2), mar = c(1,4,1,1))
# plot(MC_omic, type = 'l'); abline(h = 1/.25, col = 2)
# plot(MC_phi, type = 'l'); abline(h = 1, col = 2)
# plot(MC_eta_sig2, type = 'l'); abline(h = .25, col = 2)
# plot(MC_a1[,1], type = 'l'); abline(h = -0.1996225, col = 2)
# plot(MC_a1[,2], type = 'l'); abline(h = -0.71816621, col = 2)
# plot(MC_a1[,3], type = 'l'); abline(h = 1.00020814, col = 2)
# par(mfrow = c(1,1))
par(mfrow = c(3,2), mar = c(4.5,1,1,1))
hist(MC_omic, breaks = 100, main = round(median(MC_omic),4)); abline( v = 1/.25, col = 2)
hist(MC_phi , breaks = 100, main = round(median(MC_phi),4)); abline( v = 1, col = 2)
hist(MC_eta_sig2, breaks = 100, main = round(median(MC_eta_sig2),4)); abline( v = .25, col = 2)
hist(MC_a1[,1], breaks = 100, main = round(median(MC_a1[,1]),4)); abline( v = -0.1996225, col = 2)
hist(MC_a1[,2], breaks = 100, main = round(median(MC_a1[,2]),4)); abline( v = -0.71816621, col = 2)
hist(MC_a1[,3], breaks = 100, main = round(median(MC_a1[,3]),4)); abline( v = 1.00020814, col = 2)
par(mfrow = c(1,1))
# A0 in our paper
solve(Par$B)
rm(list = ls())
source('./rfun/simu_DGP.R')
# Get parameters of VAR(2) ------------------------------------------------
# Autoregressive parameter: B1, B2 in our paper
Par$A_1
Par$A_2
# structural impact multiplier: A0^-1 in our paper
Par$B
# A0 in our paper
solve(Par$B)
# y_t = A1 y_t-1 + A2 y_t-2 + u_t
#     = A1 y_t-1 + A2 y_t-2 + B eps_t
# in our paper
# y_t = A1 y_t-1 + A2 y_t-2 + inv(A0) eps_t
# a1' = [-0.1996225, -0.71816621, 1.00020814]
write.csv(cbind(Par$A_1, Par$A_2) , file = '../dat/simu/simu_Bs.csv')
write.csv(solve(Par$B), file = '../dat/simu/simu_A0.csv')
# Set parameters of stochastic vola equation ------------------------------
Pi = matrix(c(0.72,  0.08,
0.2,  0.9), nrow = 2, ncol = 2, byrow = T)
Q = c(0.3, 1.2)
# foo_t = (h1_t, lamb_t)
# foo_t = Pi foo_t-1 + zeta_t, zeta_t ~ N(0, diag(Q))
write.csv(Pi, file = '../dat/simu/simu_Gamma.csv')
write.csv(diag(Q), file = '../dat/simu/simu_Q.csv')
# Set parameters of MP-IV equation ----------------------------------------
# MP shock is the third one
phi = 1
eta_sd = 0.2
(phi/eta_sd)^2
# eps3_t = inv(B)[3,] u_t = a1' u_t
# z_t = phi eps3_t + eta_t, eta_t ~ N(0, eta_sd^2)
# Make data ---------------------------------------------------------------
Tob = 480 # sample size
set.seed(1234)
dat = .DGP1(Par, Tob, phi, eta_sd, stv_ar = Pi, stv_sd = sqrt(Q), burn = 1000)
y = dat$Y
u = vars::VAR(y, p = 2, type = 'none')
u
u = resid(vars::VAR(y, p = 2, type = 'none'))
u
dat$h
# structural impact multiplier: A0^-1 in our paper
Par$B
# A0 in our paper
solve(Par$B)
Par$A_1
Par$A_2
# A0 in our paper
solve(Par$B)
# A0 in our paper
solve(Par$B) %>% round(4)
# A0 in our paper
solve(Par$B)
B
dat$Y[,1]
dat$Y[,1] %>% plot
dat$Y[,1] %>% plot(type = 'l')
dat$Y[,2] %>% plot(type = 'l')
dat$Y[,3] %>% plot(type = 'l')
y = dat$Y
u = resid(vars::VAR(y, p = 2, type = 'none'))
u
u
u_std = u
for (i in 1:nrow(dat$h)) {
H_sqrt_inv = diag(1/sqrt(dat$h[i,]))
u_std[i,] = H_sqrt_inv %*% t(u[i,,drop = F])
}
u
u_std = u
for (i in 3:nrow(dat$h)) {
H_sqrt_inv = diag(1/sqrt(dat$h[i,]))
u_std[i,] = H_sqrt_inv %*% t(u[i,,drop = F])
}
u_std = u
for (i in 1:nrow(u)) {
H_sqrt_inv = diag(1/sqrt(dat$h[i+2,]))
u_std[i,] = H_sqrt_inv %*% t(u[i,,drop = F])
}
u_std %>% cov
u_std = u
for (i in 1:nrow(u)) {
H_sqrt_inv = diag(1/sqrt(dat$h[i+2,])) %*% solve(Par$B)
u_std[i,] = H_sqrt_inv %*% t(u[i,,drop = F])
}
u_std %>% cov
diag(1/sqrt(dat$h[i+2,]))
u_std = u
for (i in 1:nrow(u)) {
H_sqrt_inv = diag(1/sqrt(dat$h[i+2,])) %*% Par$B
u_std[i,] = H_sqrt_inv %*% t(u[i,,drop = F])
}
u_std %>% cov
u_std = u
for (i in 1:nrow(u)) {
H_sqrt_inv = diag(1/sqrt(dat$h[i+2,])) %*% solve(Par$B)
u_std[i,] = H_sqrt_inv %*% t(u[i,,drop = F])
}
u_std %>% cov
# Make data ---------------------------------------------------------------
Tob = 4800 # sample size
set.seed(1234)
dat = .DGP1(Par, Tob, phi, eta_sd, stv_ar = Pi, stv_sd = sqrt(Q), burn = 1000)
y = dat$Y
u = resid(vars::VAR(y, p = 2, type = 'none'))
u_std = u
for (i in 1:nrow(u)) {
H_sqrt_inv = diag(1/sqrt(dat$h[i+2,])) %*% solve(Par$B)
u_std[i,] = H_sqrt_inv %*% t(u[i,,drop = F])
}
u_std %>% cov
vars::VAR(y, p = 2, type = 'none') %>% vars::Bcoef()
# Get parameters of VAR(2) ------------------------------------------------
# Autoregressive parameter: B1, B2 in our paper
Par$A_1
Par$A_2
View(y)
